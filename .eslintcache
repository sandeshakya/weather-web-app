[{"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\index.tsx":"1","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\App.tsx":"2","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\ColorModeSwitcher.tsx":"3","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\Header.tsx":"4","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\CurrentWeather.tsx":"5","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\utils\\temperatureConverter.tsx":"6","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\utils\\CaseConvert.tsx":"7","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\DailyForecast.tsx":"8","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\WeatherForecastCard.tsx":"9"},{"size":278,"mtime":1608874500189,"results":"10","hashOfConfig":"11"},{"size":803,"mtime":1609014947780,"results":"12","hashOfConfig":"11"},{"size":743,"mtime":1608876693026,"results":"13","hashOfConfig":"11"},{"size":524,"mtime":1608878624592,"results":"14","hashOfConfig":"11"},{"size":3672,"mtime":1609121737166,"results":"15","hashOfConfig":"11"},{"size":108,"mtime":1608886620498,"results":"16","hashOfConfig":"11"},{"size":227,"mtime":1608887346376,"results":"17","hashOfConfig":"11"},{"size":3001,"mtime":1609123154338,"results":"18","hashOfConfig":"11"},{"size":1254,"mtime":1609123343207,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1vuim43",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\index.tsx",[],["41","42"],"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\App.tsx",[],"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\ColorModeSwitcher.tsx",[],"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\Header.tsx",[],"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\CurrentWeather.tsx",["43"],"import {\r\n  Box,\r\n  Center,\r\n  CircularProgress,\r\n  Container,\r\n  Flex,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  IconButton,\r\n  Image,\r\n  Spacer,\r\n  Text,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { convertToTitleCase } from \"../utils/CaseConvert\";\r\nimport { KelvinToCelsius } from \"../utils/temperatureConverter\";\r\nimport { RepeatIcon } from \"@chakra-ui/icons\";\r\n\r\ninterface WeatherQueryParams {\r\n  q: string;\r\n  appid: string;\r\n}\r\n\r\ninterface WeatherProps {\r\n  sunrise: number;\r\n  sunset: number;\r\n  temp: number;\r\n  feels_like: number;\r\n  pressure: number;\r\n  humidity: number;\r\n  weather: {\r\n    id: number;\r\n    main: string;\r\n    description: string;\r\n    icon: string;\r\n  };\r\n}\r\n\r\nconst weatherAPI = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst weatherURL = process.env.REACT_APP_WEATHER_URL as string;\r\n\r\nexport default function CurrentWeather() {\r\n  const [currentWeather, setCurrentWeather] = useState<WeatherProps | undefined>(undefined);\r\n  const [lastUpdated, setLastUpdated] = useState(Date.now());\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { data: weatherResp } = await axios.get(weatherURL, {\r\n        params: {\r\n          q: \"saskatoon\",\r\n          appid: weatherAPI,\r\n        } as WeatherQueryParams,\r\n      });\r\n      const weatherdata = {\r\n        weather: weatherResp.weather[0],\r\n        sunrise: weatherResp.sys.sunrise * 1000,\r\n        sunset: weatherResp.sys.sunset * 1000,\r\n        ...weatherResp.main,\r\n      } as WeatherProps;\r\n      setCurrentWeather(weatherdata);\r\n    })();\r\n  }, [lastUpdated]);\r\n\r\n  return !currentWeather ? (\r\n    <CircularProgress />\r\n  ) : (\r\n    <Center>\r\n      <VStack>\r\n        <Heading>Current Weather</Heading>\r\n        <Box borderWidth=\"2px\" borderRadius=\"xl\" boxSize=\"sm\">\r\n          <Flex style={{ margin: 8 }}>\r\n            <Text fontSize=\"lg\">{`Last Updated at ${new Date(lastUpdated).toLocaleTimeString()}`}</Text>\r\n            <Spacer />\r\n            <IconButton icon={<RepeatIcon />} aria-label=\"Refresh Data\" onClick={() => setLastUpdated(Date.now())} />\r\n          </Flex>\r\n          <Grid templateColumns=\"repeat(2,2fr)\">\r\n            <GridItem>\r\n              <Container>\r\n                <Image src={`http://openweathermap.org/img/wn/${currentWeather.weather.icon}@2x.png`} />\r\n                <Text fontSize=\"2xl\">{convertToTitleCase(currentWeather.weather.description)}</Text>\r\n                <Text fontSize=\"xl\">{KelvinToCelsius(currentWeather.temp)}</Text>\r\n                <Text fontSize=\"2xl\">Feels like</Text>\r\n                <Text fontSize=\"xl\">{KelvinToCelsius(currentWeather.feels_like)}</Text>\r\n              </Container>\r\n            </GridItem>\r\n            <GridItem>\r\n              <Text fontSize=\"2xl\">Pressure</Text>\r\n              <Text fontSize=\"xl\">{`${currentWeather.pressure} hPa`}</Text>\r\n              <br />\r\n              <Text fontSize=\"2xl\">Humidity</Text>\r\n              <Text fontSize=\"xl\">{`${currentWeather.humidity}%`}</Text>\r\n              <br />\r\n              <Grid templateColumns=\"repeat(2,2fr)\">\r\n                <GridItem>\r\n                  <Text fontSize=\"2xl\">Sunrise</Text>\r\n                  <Text fontSize=\"xl\">{`${new Date(currentWeather.sunrise).toLocaleTimeString()}`}</Text>\r\n                </GridItem>\r\n                <GridItem>\r\n                  <Text fontSize=\"2xl\">Sunset</Text>\r\n                  <Text fontSize=\"xl\">{`${new Date(currentWeather.sunset).toLocaleTimeString()}`}</Text>\r\n                </GridItem>\r\n              </Grid>\r\n            </GridItem>\r\n          </Grid>\r\n        </Box>\r\n      </VStack>\r\n    </Center>\r\n  );\r\n}\r\n","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\utils\\temperatureConverter.tsx",[],"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\utils\\CaseConvert.tsx",["44"],"import { FaWordpressSimple } from \"react-icons/fa\";\r\n\r\nexport const convertToTitleCase = (words: string): string =>\r\n  words\r\n    .split(\" \")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.substr(1))\r\n    .join(\" \");\r\n","C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\DailyForecast.tsx",["45","46","47","48"],"C:\\Users\\shakya\\Documents\\weather-chakra-ts\\src\\components\\WeatherForecastCard.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":17,"column":28,"nodeType":"55","messageId":"56","endLine":17,"endColumn":35},{"ruleId":"53","severity":1,"message":"57","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":27},{"ruleId":"53","severity":1,"message":"58","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":13},{"ruleId":"53","severity":1,"message":"59","line":1,"column":41,"nodeType":"55","messageId":"56","endLine":1,"endColumn":50},{"ruleId":"53","severity":1,"message":"60","line":1,"column":52,"nodeType":"55","messageId":"56","endLine":1,"endColumn":56},{"ruleId":"53","severity":1,"message":"61","line":1,"column":74,"nodeType":"55","messageId":"56","endLine":1,"endColumn":78},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'FaWordpressSimple' is defined but never used.","'Box' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'Text' is defined but never used.","no-global-assign","no-unsafe-negation"]